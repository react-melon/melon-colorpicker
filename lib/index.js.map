{"version":3,"sources":["index.js"],"names":["util","cx","ColorPicker","props","context","onSubmit","bind","onHueChange","onSaturationChange","onBoxClick","onLabelClick","onHexChange","isRawInputError","onClickAway","state","satValue","color","open","error","componentWillUnmount","off","document","e","contains","refs","picker","target","setState","top","pageY","left","pageX","on","length","onChange","type","value","huel","huet","red","green","blue","quyu","parseInt","yushu","Math","round","colorHEX","toHex","opt","err","val","satVal","rgb","replace","toUpperCase","satl","satt","percentH","percentW","reduce","result","item","part","slice","renderBox","box","hue","getPartClassName","backgroundColor","renderBoxes","boxes","map","render","placeholder","build","display","border","displayName","defaultProps","propTypes","string","arrayOf","shape","isRequired"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @file ColorPicker\n * @author jingyuanZhang<zhangjingyuan1108@outlook.com>\n * @author leon<ludafa@outlook.com>\n */\n\nimport React, {PropTypes} from 'react';\n\nimport InputComponent from 'melon-core/InputComponent';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nimport Icon  from 'melon/Icon';\nimport Button from 'melon/Button';\nimport dom from 'melon/common/util/dom';\n\nimport * as util from './util';\n\nconst cx = create('ColorPicker');\n\n/**\n * melon 选色器\n */\nexport default class ColorPicker extends InputComponent {\n\n    constructor(props, context) {\n\n        super(props, context);\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onHueChange = this.onHueChange.bind(this);\n        this.onSaturationChange = this.onSaturationChange.bind(this);\n        this.onBoxClick = this.onBoxClick.bind(this);\n        this.onLabelClick = this.onLabelClick.bind(this);\n        this.onHexChange = this.onHexChange.bind(this);\n        this.isRawInputError = this.isRawInputError.bind(this);\n        this.onClickAway = this.onClickAway.bind(this);\n\n        this.state = {\n            ...this.state,\n            satValue: '00FFE7',\n            color: '00FFE7',\n            open: false,\n            error: false\n        };\n\n    }\n\n    componentWillUnmount() {\n        dom.off(document, 'click', this.onClickAway);\n    }\n\n    /**\n     * 当选色器打开后，根据点击事件位置判断是都关闭选色器，点击选色器组件外关闭选择器\n     *\n     * @param {Object} e 点击事件\n     */\n    onClickAway(e) {\n        let open = this.state.open;\n        // alert(dom.contains(this.refs.picker, e.target));\n        if (open && !dom.contains(this.refs.picker, e.target)) {\n            this.setState({open: false}, () => {\n                dom.off(document, 'click', this.onClickAway);\n            });\n        }\n    }\n\n    /**\n     * 点击TextBox时打开颜色选择器，当选择器打开后，再次点击关闭\n     *\n     * @param {Object} e 点击事件\n     */\n    onLabelClick(e) {\n        let open = this.state.open;\n        this.setState({\n            open: !open,\n            top: e.pageY + 20,\n            left: e.pageX + 20\n        }, () => {\n            dom.on(document, 'click', this.onClickAway);\n        });\n    }\n\n    /**\n     * 检查用户输入的rgb是否正确\n     *\n     * @protected\n     * @param {number} color 页数\n     * @return {boolean} error 验证结果\n     */\n    isRawInputError(color) {\n        return color !== '' && color.length !== 3 && color.length !== 6;\n    }\n\n    /**\n     * 提交所选颜色\n     *\n     * @protected\n     */\n    onSubmit() {\n\n        if (this.state.error) {\n            return;\n        }\n\n        let color = this.state.color;\n\n        this.setState({open: false});\n\n        super.onChange({\n            type: 'change',\n            target: this,\n            value: color ? '#' + color : ''\n        });\n\n    }\n\n    /**\n     * 用户点击色调块（hue div）选择基本色调时的响应函数\n     *\n     * @param {Object} e 用户点击色调块事件\n     */\n    onHueChange(e) {\n\n        const {top, left} = this.state;\n\n        let huel = e.pageX - left;\n        let huet = e.pageY - top - 160;\n        let red = 0;\n        let green = 0;\n        let blue = 0;\n\n        if ((huel >= 0 && huel <= 240) && (huet >= 0 && huet <= 16)) {\n\n            let quyu = parseInt(huel / 40, 10);\n            let yushu = huel % 40;\n\n            switch (quyu) {\n                case 0:\n                    red = 255;\n                    green = Math.round(255 * yushu / 40);\n                    blue = 0;\n                    break;\n\n                case 1:\n                    red = Math.round(255 * (1 - yushu / 40));\n                    green = 255;\n                    blue = 0;\n                    break;\n\n                case 2:\n                    red = 0;\n                    green = 255;\n                    blue = Math.round(255 * yushu / 40);\n                    break;\n\n                case 3:\n                    red = 0;\n                    green = Math.round(255 * (1 - yushu / 40));\n                    blue = 255;\n                    break;\n\n                case 4:\n                    red = Math.round(255 * yushu / 40);\n                    green = 0;\n                    blue = 255;\n                    break;\n\n                case 5:\n                    red = 255;\n                    green = 0;\n                    blue = Math.round(255 * (1 - yushu / 40));\n                    break;\n                default:\n                    break;\n            }\n\n            const colorHEX = `${util.toHex(red)}${util.toHex(green)}${util.toHex(blue)}`;\n\n            this.setState({\n                color: colorHEX,\n                satValue: colorHEX\n            });\n\n        }\n    }\n\n    /**\n     * 用户点击了选色器下面的颜色样例后的行为\n     *\n     * @protected\n     * @param {Object} opt 即将验证value值的对象\n     */\n    onBoxClick(opt) {\n\n        let err = this.isRawInputError(opt.val);\n\n        this.setState({\n            color: opt.val,\n            satValue: opt.satVal,\n            error: err\n        });\n\n    }\n\n    /**\n     * 当用户手动修改输入框的颜色值，旁边的颜色展示区跟着变化\n     *\n     * @protected\n     * @param {Object} e 即将验证value值的对象\n     */\n    onHexChange(e) {\n        let rgb = e.target.value;\n        if (rgb.length > 6) {\n            return;\n        }\n        rgb = rgb.replace(/[^0-9a-f\bA-F]/gi, '');\n        this.setState({color: rgb.toUpperCase()});\n    }\n\n    /**\n     * 当用户点击饱和度（saturation）区域时，输入框和颜色展示区显示相应颜色\n     *\n     * @protected\n     * @param {Event} e 事件\n     */\n    onSaturationChange(e) {\n        const {top, left, satValue} = this.state;\n        let satl = e.pageX - left;\n        let satt = e.pageY - top;\n\n        if ((satl >= 0 && satl <= 240) && (satt >= 0 && satt <= 150)) {\n            let percentH = satt / 150;\n            let percentW = satl / 240;\n            let colorHEX = [0, 2, 4].reduce((result, item) => {\n                let part = parseInt('0x' + satValue.slice(item, item + 2), 16);\n                part = 255 - (255 - part) * percentW;\n                part = util.toHex(Math.round(part * (1 - percentH)));\n                return result + part;\n            }, '');\n            this.setState({color: colorHEX});\n        }\n    }\n\n    renderBox(box) {\n\n        const {\n            color,\n            hue\n        } = box;\n\n        return (\n            <span\n                key={color}\n                className={cx.getPartClassName('box')}\n                style={{\n                    backgroundColor: '#' + color\n                }}\n                onClick={() => this.onBoxClick({val: color, satVal: hue})}>\n            </span>\n        );\n\n    }\n\n    renderBoxes(boxes) {\n\n        return (\n            <div className={cx.getPartClassName('boxes')}>\n                {boxes.map(item => this.renderBox(item))}\n            </div>\n        );\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        const {\n            satValue,\n            open,\n            top,\n            left,\n            color,\n            value,\n            error\n        } = this.state;\n\n        const {\n            placeholder,\n            boxes\n        } = this.props;\n\n        return (\n            <div ref=\"picker\" className={cx(this.props).build()}>\n                <label onClick={this.onLabelClick}>\n                        <span className={cx.getPartClassName('label-placeholder')}>\n                            {value ? value : placeholder}\n                        </span>\n                    <Icon icon='expand-more'/>\n                </label>\n                <div\n                    className={cx.getPartClassName('picker')}\n                    style={{\n                        display: open ? 'block' : 'none',\n                        top: top,\n                        left: left\n                    }}\n                    onClick={this.onSaturationChange}>\n                    <div className={cx.getPartClassName('saturation')}\n                        style={{\n                            backgroundColor: '#' + satValue\n                        }}>\n                        <div className={cx.getPartClassName('white')}>\n                            <div className={cx.getPartClassName('black')}></div>\n                        </div>\n                    </div>\n                    <div className={cx.getPartClassName('hue')} onClick={this.onHueChange}></div>\n                    <span className={cx.getPartClassName('label')}>Hex</span>\n                    <input\n                        className={cx.getPartClassName('rgbstr')}\n                        type=\"text\"\n                        onBlur={() => {\n                            this.setState({\n                                error: this.isRawInputError(color)\n                            });\n                        }}\n                        ref=\"rgbStr\"\n                        placeholder={placeholder}\n                        value={color}\n                        onChange={this.onHexChange}\n                        style={{\n                            border: error ? '1px red solid' : null\n                        }}/>\n                    <div\n                        className={cx.getPartClassName('result')}\n                        style={{\n                            backgroundColor: '#' + color\n                        }}>\n                    </div>\n                    <Button\n                        label=\"OK\"\n                        key=\"submit\"\n                        size=\"xxs\"\n                        type=\"button\"\n                        variants={['secondery']}\n                        className={cx.getPartClassName('submit')}\n                        onClick={this.onSubmit}/>\n                    {this.renderBoxes(boxes)}\n                </div>\n            </div>\n\n        );\n\n    }\n\n}\n\nColorPicker.displayName = 'ColorPicker';\n\nColorPicker.defaultProps = {\n\n    ...InputComponent.defaultProps,\n\n    /**\n      * 选色器标签文字\n      */\n    placeholder: '请选择',\n\n    boxes: [\n        {color: 'FF425E', hue: 'FF0059'},\n        {color: 'C6EDE8', hue: '00FFF9'},\n        {color: '66CCCC', hue: '00FFF9'},\n        {color: 'FFFFFF', hue: '00FFF9'},\n        {color: '000000', hue: '0079FF'},\n        {color: 'CCCCCC', hue: '00CCFF'},\n        {color: '576069', hue: 'FF0026'},\n        {color: 'E2D3AC', hue: 'FFC600'},\n        {color: 'FDDA04', hue: 'FFDF00'},\n        {color: 'E58308', hue: 'FF8C00'},\n        {color: 'FF99CC', hue: 'FF00BF'},\n        {color: 'FC9D9B', hue: 'FF0000'},\n        {color: '59453E', hue: 'FF0000'},\n        {color: 'CCFF00', hue: 'B3FF00'}\n    ]\n\n};\n\nColorPicker.propTypes = {\n    ...InputComponent.propTypes,\n    placeholder: PropTypes.string,\n    boxes: PropTypes.arrayOf(PropTypes.shape({\n        color: PropTypes.string.isRequired,\n        hue: PropTypes.string.isRequired\n    }))\n};\n"],"sourceRoot":"/source/"}