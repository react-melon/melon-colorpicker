{"version":3,"sources":["index.js"],"names":["cx","HUE_HEIGHT","SV_SIZE","ColorPicker","props","context","onSubmit","bind","onHueChange","onSaturationChange","onLabelClick","onClickAway","onAlphaChange","renderLayer","k","state","value","hsva","toArray","h","s","v","a","rgb","r","g","b","hex","open","componentDidUpdate","layer","main","mainArchor","layerArchor","points","overflow","adjustX","adjustY","componentWillReceiveProps","nextProps","updateValue","setState","closing","e","onChange","rgba","css","target","type","pageY","currentTarget","getBoundingClientRect","top","pageX","left","toFixed","renderBox","color","getPartClassName","backgroundColor","renderBoxes","boxes","reduce","groups","box","index","i","Math","floor","group","push","map","item","renderRGBAInputs","time","key","round","isNaN","toUpperCase","renderLayerContent","placeholder","alphaStart","alphaStop","alphaForegroundColor","hsv","transform","background","begin","end","content","opacity","scale","stiffness","damping","render","variants","states","size","className","addVariants","addStates","build","label","displayName","archor","oneOf","propTypes","string","arrayOf","isRequired","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @file ColorPicker\n * @author jingyuanZhang<zhangjingyuan1108@outlook.com>\n * @author leon<ludafa@outlook.com>\n */\n\nimport React, {PropTypes} from 'react';\nimport InputComponent from 'melon-core/InputComponent';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport {Motion, spring} from 'react-motion';\nimport Layer from 'melon-layer';\nimport Icon  from 'melon/Icon';\nimport Button from 'melon/Button';\nimport align from 'dom-align';\nimport kolor from 'kolor';\n\nconst cx = create('ColorPicker');\n\nconst HUE_HEIGHT = 210;\nconst SV_SIZE = 210;\n\n/**\n * melon colorpicker——选色器，主要由色调块、饱和度区、颜色值输入框、颜色展示区和常用颜色样例五部分组成\n * 用户最终选择的颜色取决于基色调和饱和度，选择的颜色在颜色展示区可以看见\n *\n * @class\n * @extends {InputComponent}\n */\nexport default class ColorPicker extends InputComponent {\n\n    constructor(props, context) {\n\n        // 继承 InputComponent\n        super(props, context);\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onHueChange = this.onHueChange.bind(this);\n        this.onSaturationChange = this.onSaturationChange.bind(this);\n        this.onLabelClick = this.onLabelClick.bind(this);\n        this.onClickAway = this.onClickAway.bind(this);\n        this.onAlphaChange = this.onAlphaChange.bind(this);\n        this.renderLayer = this.renderLayer.bind(this);\n\n        let k = kolor(this.state.value || '');\n\n        if (!k) {\n            k = kolor('#ff0000');\n        }\n\n        let [h, s, v, a] = k.hsva().toArray();\n        let [r, g, b] = k.rgb().toArray();\n\n        this.state = {\n\n            ...this.state,\n\n            // hua\n            h,\n\n            // saturation\n            s,\n\n            // value\n            v,\n\n            // alpha\n            a,\n\n\n            // 这四个值只是用来缓存输入\n            r,\n\n            g,\n\n            b,\n\n            hex: k.hex(),\n\n            // 表示当前colorpicker选色器的状态，默认是没有显示\n            open: false\n\n        };\n\n    }\n\n    componentDidUpdate() {\n\n        if (this.state.open && this.layer && this.main) {\n\n            let {\n                mainArchor,\n                layerArchor\n            } = this.props;\n\n            align(\n                this.layer,\n                this.main,\n                {\n                    points: [layerArchor, mainArchor],\n                    overflow: {\n                        adjustX: true,\n                        adjustY: true\n                    }\n                }\n            );\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        if (this.props.value !== nextProps.value) {\n            let k = kolor(nextProps.value);\n            if (k) {\n                this.updateValue(...k.hsva().toArray());\n            }\n        }\n\n        super.componentWillReceiveProps(nextProps);\n\n    }\n\n    /**\n     * 当选色器打开后，根据点击事件位置判断是都关闭选色器，点击选色器组件外关闭选择器\n     *\n     * @protected\n     */\n    onClickAway() {\n        this.setState({closing: true});\n    }\n\n\n    /**\n     * 给label标签TextBox绑定的点击事件，点击TextBox时打开颜色选择器，当选择器打开后，再次点击关闭\n     *\n     * @protected\n     * @param {Object} e 点击事件\n     */\n    onLabelClick(e) {\n        if (this.state.open) {\n            this.onClickAway();\n        }\n        else {\n            this.setState({open: true});\n        }\n    }\n\n    /**\n     * 点击OK键，提交输入框的颜色值rgb\n     *\n     * @protected\n     */\n    onSubmit() {\n\n        let {h, s, v, a} = this.state;\n\n        this.onClickAway();\n\n        super.onChange({\n            value: kolor.hsva(h, s, v, a).rgba().css(),\n            target: this,\n            type: 'change'\n        });\n\n    }\n\n    /**\n     * 用户点击色调块（hue div）,选择基本色调rgb值\n     *\n     * @protected\n     * @param {Object} e 用户点击色调块hue事件\n     */\n    onHueChange(e) {\n\n        let {pageY, currentTarget} = e;\n\n        this.setState({\n            h: (pageY - currentTarget.getBoundingClientRect().top) / HUE_HEIGHT * 360\n        });\n\n    }\n\n    /**\n     * 当用户点击饱和度（saturation）区域时，输入框和颜色展示区显示相应颜色，\n     *\n     * @protected\n     * @param {Object} e 用户在饱和度区域的点击事件\n     */\n    onSaturationChange(e) {\n\n        let {currentTarget, pageX, pageY} = e;\n\n        // 获取当前选色器里饱和度区域的位置\n        let {top, left} = currentTarget.getBoundingClientRect();\n\n        // 获取用户点击位置 left -> hsv.s\n        let s = (pageX - left) / SV_SIZE;\n\n        // 获取用户点击位置 top -> hsv.v\n        let v = 1 - (pageY - top) / SV_SIZE;\n\n        this.setState({s, v});\n\n    }\n\n    onAlphaChange(e) {\n        let {currentTarget, pageY} = e;\n        this.setState({\n            a: +((pageY - currentTarget.getBoundingClientRect().top) / HUE_HEIGHT).toFixed(2)\n        });\n    }\n\n    updateValue(h, s, v, a) {\n        let k = kolor.hsva(h, s, v, a);\n        let [r, g, b] = k.rgb().toArray();\n        this.setState({h, s, v, a, r, g, b, hex: k.hex()});\n    }\n\n    /**\n     * 渲染常用颜色样例区域的颜色样例结构\n     *\n     * @protected\n     * @param {string} color 定义的常用颜色样例对象，包含颜色值和基色调两个属性\n     * @return {React.Element}\n     */\n    renderBox(color) {\n        return (\n            <span\n                key={color}\n                className={cx.getPartClassName('box')}\n                style={{\n                    backgroundColor: color\n                }}\n                onClick={() => this.updateValue(...kolor(color).hsva().toArray())}>\n            </span>\n        );\n    }\n\n    /**\n     * 渲染常用颜色样例区域\n     *\n     * @protected\n     * @param {Array} boxes 包含颜色样例的数组\n     * @return {React.Element}\n     */\n    renderBoxes(boxes) {\n\n        return boxes\n            .reduce((groups, box, index) => {\n\n                let i = Math.floor(index / 8);\n                let group = groups[i];\n\n                if (!group) {\n                    group = groups[i] = [];\n                }\n\n                group.push(box);\n\n                return groups;\n\n            }, [])\n            .map((boxes, index) => (\n                <div key={index} className={cx.getPartClassName('box-panel')}>\n                    {boxes.map(item => this.renderBox(item))}\n                </div>\n            ));\n\n    }\n\n    renderRGBAInputs() {\n\n        let {r, g, b, a} = this.state;\n\n        return ['r', 'g', 'b', 'a']\n            .map(key => {\n\n                let time = key === 'a' ? 100 : 1;\n                let value = this.state[key];\n\n                return (\n                    <li\n                        key={key}\n                        className={cx.getPartClassName('input-box')}>\n                        <input\n                            className={cx.getPartClassName(`input-${key}`)}\n                            value={value === '' ? value : Math.round(this.state[key] * time)}\n                            onBlur={e => {\n\n                                if (e.target.value) {\n                                    return;\n                                }\n\n                                let {h, s, v, a} = this.state;\n\n                                this.updateValue(h, s, v, a);\n\n                            }}\n                            onChange={e => {\n\n                                let v = e.target.value;\n\n                                if (!v) {\n                                    this.setState({\n                                        [key]: ''\n                                    });\n                                    return;\n                                }\n\n                                v = +v;\n\n                                if (isNaN(v)) {\n                                    return;\n                                }\n\n                                let k = kolor.rgba({\n                                    r, g, b, a,\n                                    [key]: v / time\n                                });\n\n                                if (!k) {\n                                    k = kolor.rgba(r, g, b, a);\n                                }\n\n                                this.updateValue(...k.hsva().toArray());\n\n                            }} />\n                        <label className={cx.getPartClassName('input-label')}>\n                            {key.toUpperCase()}\n                        </label>\n                    </li>\n                );\n\n            });\n\n    }\n\n    renderLayerContent() {\n\n        let {\n            // 用户可定义的选色器标签提示文字，'请选择'等提示语\n            placeholder,\n            // 用户可定义的常用颜色样例\n            boxes\n        } = this.props;\n\n        let {\n            h,\n            s,\n            v,\n            a,\n            hex\n        } = this.state;\n\n        let k = kolor.hsva(h, s, v, a);\n        let [r, g, b] = k.rgb().toArray();\n        let alphaStart = kolor.rgba(r, g, b, 0).css();\n        let alphaStop = kolor.rgba(r, g, b, 1).css();\n        let alphaForegroundColor = `linear-gradient(180deg, ${alphaStart}, ${alphaStop})`;\n\n        return (\n            <div>\n                <div className={cx.getPartClassName('selector-panel')}>\n                    <div\n                        className={cx.getPartClassName('saturation')}\n                        style={{\n                            backgroundColor: kolor.hsv(h, 1, 1).rgb().css()\n                        }}\n                        onClick={this.onSaturationChange}>\n                        <div className={cx.getPartClassName('white')}>\n                            <div className={cx.getPartClassName('black')}></div>\n                        </div>\n                        <div\n                            className={cx.getPartClassName('sv-anchor')}\n                            style={{\n                                transform: `translate(${s * SV_SIZE}px, ${(1 - v) * SV_SIZE}px)`\n                            }} />\n                    </div>\n                    <div\n                        className={cx.getPartClassName('hue')}\n                        onClick={this.onHueChange}>\n                        <div\n                            className={cx.getPartClassName('hue-anchor')}\n                            style={{\n                                transform: `translateY(${HUE_HEIGHT * h / 360}px)`\n                            }} />\n                    </div>\n                    <div className={cx.getPartClassName('alpha')}>\n                        <div\n                            className={cx.getPartClassName('alpha-foreground')}\n                            style={{\n                                background: alphaForegroundColor\n                            }}\n                            onClick={this.onAlphaChange}>\n                            <div\n                                className={cx.getPartClassName('alpha-anchor')}\n                                style={{\n                                    transform: `translateY(${Math.round(a * HUE_HEIGHT)}px)`\n                                }} />\n                        </div>\n                    </div>\n                </div>\n                <ul className={cx.getPartClassName('input-panel')}>\n                    <li className={cx.getPartClassName('input-box')}>\n                        <input\n                            className={cx.getPartClassName('input-hex')}\n                            type=\"text\"\n                            onChange={e => this.setState({hex: e.target.value})}\n                            onBlur={e => {\n                                let k = kolor(e.target.value);\n                                k = k ? k.hsva().a(a) : kolor.hsva(h, s, v, a);\n                                this.updateValue(...k.toArray());\n                            }}\n                            placeholder={placeholder}\n                            value={hex} />\n                        <label className={cx.getPartClassName('input-label')}>HEX</label>\n                    </li>\n                    {this.renderRGBAInputs()}\n                </ul>\n                {this.renderBoxes(boxes)}\n                <div className={cx.getPartClassName('button-panel')}>\n                    <Button\n                        label=\"cancel\"\n                        size=\"xxs\"\n                        type=\"button\"\n                        variants={['secondery']}\n                        className={cx.getPartClassName('cancel')}\n                        onClick={this.onClickAway}/>\n                    <Button\n                        label=\"OK\"\n                        size=\"xxs\"\n                        type=\"button\"\n                        variants={['secondery']}\n                        className={cx.getPartClassName('submit')}\n                        onClick={this.onSubmit}/>\n                </div>\n            </div>\n        );\n    }\n\n    renderLayer() {\n\n        let {open, closing} = this.state;\n        let begin = open && !closing ? 0 : 1;\n        let end = open && !closing ? 1 : 0;\n        let content = this.renderLayerContent();\n\n        return (\n            <Motion\n                defaultStyle={{\n                    opacity: begin,\n                    scale: begin\n                }}\n                style={{\n                    opacity: spring(end),\n                    scale: spring(end, {stiffness: 260, damping: 20})\n                }}\n                onRest={() => {\n                    if (open && closing) {\n                        this.setState({open: false, closing: false});\n                    }\n                }}>\n                {({scale, opacity}) => (\n                    <div\n                        className={cx.getPartClassName('popup')}\n                        style={{\n                            opacity: opacity,\n                            transform: `scale(${scale}, ${scale})`\n                        }}\n                        ref={layer => {\n                            this.layer = layer;\n                        }}>\n                        {content}\n                    </div>\n                )}\n            </Motion>\n        );\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        // 输入组件的值，也就是选色器最终颜色值\n        const {value, open, closing} = this.state;\n\n        const {\n            variants,\n            states,\n            size,\n            placeholder\n        } = this.props;\n\n        const className = cx(this.props)\n            .addVariants(variants)\n            .addStates(states)\n            .build();\n\n        let label = !value\n            ? (\n                <span className={cx.getPartClassName('placeholder')}>\n                    {placeholder}\n                </span>\n            )\n            : (\n                <span className={cx.getPartClassName('value')}>\n                    <i\n                        className={cx.getPartClassName('value-indicator')}\n                        style={{backgroundColor: value}} />\n                    {value}\n                </span>\n            );\n\n\n        return (\n            <div\n                className={className}\n                ref={main => {\n                    this.main = main;\n                }}>\n                <label\n                    className={cx.getPartClassName('label')}\n                    onClick={this.onLabelClick}>\n                    {label}\n                    <Icon icon='expand-more' size={size} />\n                </label>\n                <Layer\n                    open={open || closing}\n                    render={this.renderLayer}\n                    onClickAway={this.onClickAway} />\n            </div>\n        );\n\n    }\n\n}\n\nColorPicker.displayName = 'ColorPicker';\n\nlet archor = PropTypes.oneOf([\n    'tl', 'tc', 'tr',\n    'cl', 'cc', 'cr',\n    'bl', 'bc', 'br'\n]);\n\nColorPicker.propTypes = {\n    ...InputComponent.propTypes,\n    placeholder: PropTypes.string,\n    boxes: PropTypes.arrayOf(PropTypes.string.isRequired),\n    layerArchor: archor,\n    mainArchor: archor\n};\n\nColorPicker.defaultProps = {\n\n    ...InputComponent.defaultProps,\n\n    /**\n     * 选色器标签文字\n     */\n    placeholder: '请选择',\n    // 用户自行定义的常用颜色样例\n    boxes: [\n        '#FFFFFF',\n        '#000000',\n        '#FF425E',\n        '#C6EDE8',\n        '#66CCCC',\n        '#CCCCCC',\n        '#576069',\n        '#E2D3AC',\n        '#FDDA04',\n        '#E58308',\n        '#FF99CC',\n        '#FC9D9B',\n        '#59453E',\n        '#CCFF00',\n        '#333333',\n        '#aaaaaa'\n    ],\n    layerArchor: 'tl',\n    mainArchor: 'bl'\n};\n"],"sourceRoot":"/source/"}