{"version":3,"sources":["index.js"],"names":["util","cx","ColorPicker","props","context","onSubmit","bind","onHueChange","onSaturationChange","onBoxClick","onLabelClick","onHexChange","isRawInputError","onClickAway","state","satValue","color","open","error","componentWillUnmount","off","document","e","contains","refs","main","target","setState","on","length","onChange","type","value","hue","getBoundingClientRect","top","left","huel","pageX","huet","pageY","red","green","blue","quyu","parseInt","yushu","Math","round","colorHEX","toHex","console","log","opt","err","val","satVal","rgb","replace","toUpperCase","saturation","satl","satt","percentH","percentW","reduce","result","item","part","slice","renderBox","box","getPartClassName","backgroundColor","renderBoxes","boxes","map","render","placeholder","build","display","border","displayName","defaultProps","propTypes","string","arrayOf","shape","isRequired"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @file ColorPicker\n * @author jingyuanZhang<zhangjingyuan1108@outlook.com>\n * @author leon<ludafa@outlook.com>\n */\n\nimport React, {PropTypes} from 'react';\n\nimport InputComponent from 'melon-core/InputComponent';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nimport Icon  from 'melon/Icon';\nimport Button from 'melon/Button';\nimport dom from 'melon/common/util/dom';\n\nimport * as util from './util';\n\nconst cx = create('ColorPicker');\n\n/**\n * melon 选色器\n */\nexport default class ColorPicker extends InputComponent {\n\n    constructor(props, context) {\n\n        super(props, context);\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onHueChange = this.onHueChange.bind(this);\n        this.onSaturationChange = this.onSaturationChange.bind(this);\n        this.onBoxClick = this.onBoxClick.bind(this);\n        this.onLabelClick = this.onLabelClick.bind(this);\n        this.onHexChange = this.onHexChange.bind(this);\n        this.isRawInputError = this.isRawInputError.bind(this);\n        this.onClickAway = this.onClickAway.bind(this);\n\n        this.state = {\n            ...this.state,\n            satValue: '00FFE7',\n            color: '00FFE7',\n            open: false,\n            error: false\n        };\n\n    }\n\n    componentWillUnmount() {\n        dom.off(document, 'click', this.onClickAway);\n    }\n\n    /**\n     * 当选色器打开后，根据点击事件位置判断是都关闭选色器，点击选色器组件外关闭选择器\n     *\n     * @param {Object} e 点击事件\n     */\n    onClickAway(e) {\n        let open = this.state.open;\n        if (open && !dom.contains(this.refs.main, e.target)) {\n            this.setState({open: false}, () => {\n                dom.off(document, 'click', this.onClickAway);\n            });\n        }\n    }\n\n    /**\n     * 点击TextBox时打开颜色选择器，当选择器打开后，再次点击关闭\n     *\n     * @param {Object} e 点击事件\n     */\n    onLabelClick(e) {\n        let open = this.state.open;\n        this.setState({\n            open: !open\n        }, () => {\n            dom.on(document, 'click', this.onClickAway);\n        });\n    }\n\n    /**\n     * 检查用户输入的rgb是否正确\n     *\n     * @protected\n     * @param {number} color 页数\n     * @return {boolean} error 验证结果\n     */\n    isRawInputError(color) {\n        return color !== '' && color.length !== 3 && color.length !== 6;\n    }\n\n    /**\n     * 提交所选颜色\n     *\n     * @protected\n     */\n    onSubmit() {\n\n        if (this.state.error) {\n            return;\n        }\n\n        let color = this.state.color;\n\n        this.setState({open: false});\n\n        super.onChange({\n            type: 'change',\n            target: this,\n            value: color ? '#' + color : ''\n        });\n\n    }\n\n    /**\n     * 用户点击色调块（hue div）选择基本色调时的响应函数\n     *\n     * @param {Object} e 用户点击色调块事件\n     */\n    onHueChange(e) {\n\n        const {top, left} = this.refs.hue.getBoundingClientRect();\n\n        let huel = e.pageX - left;\n        let huet = e.pageY - top;\n        let red = 0;\n        let green = 0;\n        let blue = 0;\n\n        if ((huel >= 0 && huel <= 240) && (huet >= 0 && huet <= 16)) {\n\n            let quyu = parseInt(huel / 40, 10);\n            let yushu = huel % 40;\n\n            switch (quyu) {\n                case 0:\n                    red = 255;\n                    green = Math.round(255 * yushu / 40);\n                    blue = 0;\n                    break;\n\n                case 1:\n                    red = Math.round(255 * (1 - yushu / 40));\n                    green = 255;\n                    blue = 0;\n                    break;\n\n                case 2:\n                    red = 0;\n                    green = 255;\n                    blue = Math.round(255 * yushu / 40);\n                    break;\n\n                case 3:\n                    red = 0;\n                    green = Math.round(255 * (1 - yushu / 40));\n                    blue = 255;\n                    break;\n\n                case 4:\n                    red = Math.round(255 * yushu / 40);\n                    green = 0;\n                    blue = 255;\n                    break;\n\n                case 5:\n                    red = 255;\n                    green = 0;\n                    blue = Math.round(255 * (1 - yushu / 40));\n                    break;\n                default:\n                    break;\n            }\n\n            const colorHEX = `${util.toHex(red)}${util.toHex(green)}${util.toHex(blue)}`;\n\n            console.log(colorHEX);\n\n            this.setState({\n                color: colorHEX,\n                satValue: colorHEX\n            });\n\n        }\n    }\n\n    /**\n     * 用户点击了选色器下面的颜色样例后的行为\n     *\n     * @protected\n     * @param {Object} opt 即将验证value值的对象\n     */\n    onBoxClick(opt) {\n\n        let err = this.isRawInputError(opt.val);\n\n        this.setState({\n            color: opt.val,\n            satValue: opt.satVal,\n            error: err\n        });\n\n    }\n\n    /**\n     * 当用户手动修改输入框的颜色值，旁边的颜色展示区跟着变化\n     *\n     * @protected\n     * @param {Object} e 即将验证value值的对象\n     */\n    onHexChange(e) {\n        let rgb = e.target.value;\n        if (rgb.length > 6) {\n            return;\n        }\n        rgb = rgb.replace(/[^0-9a-f\bA-F]/gi, '');\n        this.setState({color: rgb.toUpperCase()});\n    }\n\n    /**\n     * 当用户点击饱和度（saturation）区域时，输入框和颜色展示区显示相应颜色\n     *\n     * @protected\n     * @param {Event} e 事件\n     */\n    onSaturationChange(e) {\n\n        const {top, left} = this.refs.saturation.getBoundingClientRect();\n        const satValue = this.state.satValue;\n\n        let satl = e.pageX - left;\n        let satt = e.pageY - top;\n\n        if ((satl >= 0 && satl <= 240) && (satt >= 0 && satt <= 150)) {\n            let percentH = satt / 150;\n            let percentW = satl / 240;\n            let colorHEX = [0, 2, 4].reduce((result, item) => {\n                let part = parseInt('0x' + satValue.slice(item, item + 2), 16);\n                part = 255 - (255 - part) * percentW;\n                part = util.toHex(Math.round(part * (1 - percentH)));\n                return result + part;\n            }, '');\n            this.setState({color: colorHEX});\n        }\n    }\n\n    renderBox(box) {\n\n        const {\n            color,\n            hue\n        } = box;\n\n        return (\n            <span\n                key={color}\n                className={cx.getPartClassName('box')}\n                style={{\n                    backgroundColor: '#' + color\n                }}\n                onClick={() => this.onBoxClick({val: color, satVal: hue})}>\n            </span>\n        );\n\n    }\n\n    renderBoxes(boxes) {\n\n        return (\n            <div className={cx.getPartClassName('boxes')}>\n                {boxes.map(item => this.renderBox(item))}\n            </div>\n        );\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        const {\n            satValue,\n            open,\n            color,\n            value,\n            error\n        } = this.state;\n\n        const {\n            placeholder,\n            boxes\n        } = this.props;\n\n        return (\n            <div ref=\"main\" className={cx(this.props).build()}>\n                <label\n                    className={cx.getPartClassName('label')}\n                    onClick={this.onLabelClick}>\n                        <span\n                            className={cx.getPartClassName('placeholder')}\n                            style={{color: value ? '#333' : ''}}>\n                            {value ? value : placeholder}\n                        </span>\n                    <Icon icon='expand-more'/>\n                </label>\n                <div\n                    className={cx.getPartClassName('popup')}\n                    style={{\n                        display: open ? 'block' : 'none'\n                    }}>\n                    <div\n                        ref=\"saturation\"\n                        className={cx.getPartClassName('saturation')}\n                        style={{\n                            backgroundColor: '#' + satValue\n                        }}\n                        onClick={this.onSaturationChange}>\n                        <div className={cx.getPartClassName('white')}>\n                            <div className={cx.getPartClassName('black')}></div>\n                        </div>\n                    </div>\n                    <div\n                        ref=\"hue\"\n                        className={cx.getPartClassName('hue')}\n                        onClick={this.onHueChange} />\n                    <div className={cx.getPartClassName('input-box')}>\n                        <span>Hex</span>\n                        <input\n                            className={cx.getPartClassName('rgbstr')}\n                            type=\"text\"\n                            onBlur={() => {\n                                this.setState({\n                                    error: this.isRawInputError(color)\n                                });\n                            }}\n                            ref=\"rgbStr\"\n                            placeholder={placeholder}\n                            value={color}\n                            onChange={this.onHexChange}\n                            style={{\n                                border: error ? '1px red solid' : null\n                            }}/>\n                        <div\n                            className={cx.getPartClassName('result')}\n                            style={{\n                                backgroundColor: '#' + color\n                            }}>\n                        </div>\n                        <Button\n                            label=\"OK\"\n                            key=\"submit\"\n                            size=\"xxs\"\n                            type=\"button\"\n                            variants={['secondery']}\n                            className={cx.getPartClassName('submit')}\n                            onClick={this.onSubmit}/>\n                    </div>\n                    {this.renderBoxes(boxes)}\n                </div>\n            </div>\n\n        );\n\n    }\n\n}\n\nColorPicker.displayName = 'ColorPicker';\n\nColorPicker.defaultProps = {\n\n    ...InputComponent.defaultProps,\n\n    /**\n      * 选色器标签文字\n      */\n    placeholder: '请选择',\n\n    boxes: [\n        {color: 'FF425E', hue: 'FF0059'},\n        {color: 'C6EDE8', hue: '00FFF9'},\n        {color: '66CCCC', hue: '00FFF9'},\n        {color: 'FFFFFF', hue: '00FFF9'},\n        {color: '000000', hue: '0079FF'},\n        {color: 'CCCCCC', hue: '00CCFF'},\n        {color: '576069', hue: 'FF0026'},\n        {color: 'E2D3AC', hue: 'FFC600'},\n        {color: 'FDDA04', hue: 'FFDF00'},\n        {color: 'E58308', hue: 'FF8C00'},\n        {color: 'FF99CC', hue: 'FF00BF'},\n        {color: 'FC9D9B', hue: 'FF0000'},\n        {color: '59453E', hue: 'FF0000'},\n        {color: 'CCFF00', hue: 'B3FF00'}\n    ]\n\n};\n\nColorPicker.propTypes = {\n    ...InputComponent.propTypes,\n    placeholder: PropTypes.string,\n    boxes: PropTypes.arrayOf(PropTypes.shape({\n        color: PropTypes.string.isRequired,\n        hue: PropTypes.string.isRequired\n    }))\n};\n"]}