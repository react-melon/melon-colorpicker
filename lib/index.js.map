{"version":3,"sources":["index.js"],"names":["util","cx","ColorPicker","props","context","onSubmit","bind","onHueChange","onSaturationChange","onBoxClick","onLabelClick","onHexChange","isRawInputError","onClickAway","state","satValue","color","open","error","componentWillUnmount","off","document","e","contains","refs","main","target","setState","on","length","onChange","type","value","hue","getBoundingClientRect","top","left","huel","pageX","huet","pageY","red","green","blue","quyu","parseInt","yushu","Math","round","colorHEX","toHex","opt","err","val","satVal","rgb","replace","toUpperCase","saturation","satl","satt","percentH","percentW","reduce","result","item","part","slice","renderBox","box","getPartClassName","backgroundColor","renderBoxes","boxes","map","render","placeholder","build","validity","display","border","displayName","defaultProps","propTypes","string","arrayOf","shape","isRequired"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @file ColorPicker\n * @author jingyuanZhang<zhangjingyuan1108@outlook.com zhangjingyuan02@baidu.com>\n * @author leon<ludafa@outlook.com>\n */\n\nimport React, {PropTypes} from 'react';\nimport Validity from 'melon-core/Validity';\nimport InputComponent from 'melon-core/InputComponent';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nimport Icon  from 'melon/Icon';\nimport Button from 'melon/Button';\nimport dom from 'melon/common/util/dom';\n\nimport * as util from './util';\n\nconst cx = create('ColorPicker');\n\n/**\n * melon colorpicker——选色器，主要由色调块、饱和度区、颜色值输入框、颜色展示区和常用颜色样例五部分组成\n * 用户最终选择的颜色取决于基色调和饱和度，选择的颜色在颜色展示区可以看见\n *\n * @class\n * @extends {InputComponent}\n */\nexport default class ColorPicker extends InputComponent {\n\n    constructor(props, context) {\n        // 继承InputComponent\n        super(props, context);\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onHueChange = this.onHueChange.bind(this);\n        this.onSaturationChange = this.onSaturationChange.bind(this);\n        this.onBoxClick = this.onBoxClick.bind(this);\n        this.onLabelClick = this.onLabelClick.bind(this);\n        this.onHexChange = this.onHexChange.bind(this);\n        this.isRawInputError = this.isRawInputError.bind(this);\n        this.onClickAway = this.onClickAway.bind(this);\n\n        this.state = {\n            ...this.state,\n            satValue: '00FFE7',     // 预设颜色选择器的基色调rgb值，颜色值饱和度区域变化取决于该值\n            color: '00FFE7',        // 预设颜色选择器的最终选择的颜色值rgb，和选色器的颜色值hex输入框的值绑定，决定颜色展示区的颜色\n            open: false,            // 表示当前colorpicker选色器的状态，默认是没有显示\n            error: false            // 表示当前颜色值输入框的值是否不合法，默认是合法\n        };\n\n    }\n\n    /**\n     * react组件生命周期——组件销毁前调用\n     *\n     * @public\n     */\n    componentWillUnmount() {\n        // colorpicker销毁时给document解绑click事件onClickAway\n        dom.off(document, 'click', this.onClickAway);\n    }\n\n    /**\n     * 当选色器打开后，根据点击事件位置判断是都关闭选色器，点击选色器组件外关闭选择器\n     *\n     * @protected\n     * @param {Object} e 点击事件\n     */\n    onClickAway(e) {\n\n        let open = this.state.open;\n        // 当选色器已打开，且点击位置(e.target)没有点击在选色器上(this.refs.main)时，关闭选色器，并解绑点击事件onClickAway\n        if (open && !dom.contains(this.refs.main, e.target)) {\n            this.setState({open: false}, () => {\n                dom.off(document, 'click', this.onClickAway);\n            });\n        }\n    }\n\n    /**\n     * 给label标签TextBox绑定的点击事件，点击TextBox时打开颜色选择器，当选择器打开后，再次点击关闭\n     *\n     * @protected\n     * @param {Object} e 点击事件\n     */\n    onLabelClick(e) {\n\n        let open = this.state.open;\n\n        this.setState({\n            open: !open\n        }, () => {\n            if (!open) {\n                // 当颜色选择器打开时，给document绑定事件\n                dom.on(document, 'click', this.onClickAway);\n            }\n            else {\n                // 关闭颜色选择器后，解绑该事件\n                dom.off(document, 'click', this.onClickAway);\n            }\n        });\n    }\n\n    /**\n     * 检查用户输入的rgb字符串的长度是否不合法\n     *\n     * @protected\n     * @param {string} color 颜色值输入框的输入值\n     * @return {boolean} 验证结果\n     */\n    isRawInputError(color) {\n        // 输入的颜色值rgb不能为空，且长度只能为3或者6（不包含#）\n        return color !== '' && color.length !== 3 && color.length !== 6;\n    }\n\n    /**\n     * 点击OK键，提交输入框的颜色值rgb\n     *\n     * @protected\n     */\n    onSubmit() {\n        // 如果颜色值rgb不合法，不能提交，并返回\n        if (this.state.error) {\n            return;\n        }\n        // 获取当前输入框的颜色值rgb\n        let color = this.state.color;\n        // 关闭颜色选择器\n        this.setState({open: false});\n\n        super.onChange({\n            type: 'change',\n            target: this,\n            value: color ? '#' + color : ''\n        });\n    }\n\n    /**\n     * 用户点击色调块（hue div）,选择基本色调rgb值\n     *\n     * @protected\n     * @param {Object} e 用户点击色调块hue事件\n     */\n    onHueChange(e) {\n\n        // 获取当前选色器里色调块的位置\n        const {top, left} = this.refs.hue.getBoundingClientRect();\n        let huel = e.pageX - left;  // 获取用户点击位置相对色调块的位置——左\n        let huet = e.pageY - top;   // 获取用户点击位置相对色调块的位置——高\n        let red = 0;                // 初始化rgb值中r值（red），值域0~255\n        let green = 0;              // 初始化rgb值中g值（green），值域0~255\n        let blue = 0;               // 初始化rgb值中b值（blue），值域0~255\n\n        // 选色器的色调块长240px，宽16px，判断用户是否点击在色调块上\n        if ((huel >= 0 && huel <= 240) && (huet >= 0 && huet <= 16)) {\n            // 色调块由六个颜色渐变区域组成，0: (255, 0, 0)~(255, 255, 0); 1: (255, 255, 0)~(0, 255, 0); 2: (0, 255, 0)~(0, 255, 255);\n            // 3: (0, 255, 255)~(0, 0, 255); 4: (0, 0, 255)~(255, 0, 255); 5: (255, 0, 255)~(255, 0, 0);\n            // 每个渐变区域长40px\n            let quyu = parseInt(huel / 40, 10); // 获取用户点击的颜色渐变区\n            let yushu = huel % 40; // 获取用户点击位置在相应渐变区的相对位置\n\n            switch (quyu) {\n                case 0:                                             // 渐变区域 0：(255, 0, 0)~(255, 255, 0)\n                    red = 255;                                      // 区域0r值（red）一直保持不变，都是255\n                    green = Math.round(255 * yushu / 40);           // 区域0g值（green）在 0 ~ 255间，根据点击的相对位置获取g值\n                    blue = 0;                                       // 区域0b值（blue）一直保持不变，都是0\n                    break;\n\n                case 1:                                             // 渐变区域 1：(255, 255, 0)~(0, 255, 0)\n                    red = Math.round(255 * (1 - yushu / 40));       // 区域1r值（red）在 255 ~ 0间，根据点击的相对位置获取r值\n                    green = 255;                                    // 区域1g值（green）一直保持不变，都是255\n                    blue = 0;                                       // 区域1b值（blue）一直保持不变，都是0\n                    break;\n\n                case 2:                                             // 渐变区域 2：(0, 255, 0)~(0, 255, 255)\n                    red = 0;                                        // 区域2r值（red）一直保持不变，都是0\n                    green = 255;                                    // 区域2g值（green）一直保持不变，都是255\n                    blue = Math.round(255 * yushu / 40);            // 区域2b值（blue）在 0 ~ 255间，根据点击的相对位置获取b值\n                    break;\n\n                case 3:                                             // 渐变区域 3：(0, 255, 255)~(0, 0, 255)\n                    red = 0;                                        // 区域3r值（red）一直保持不变，都是0\n                    green = Math.round(255 * (1 - yushu / 40));     // 区域3g值（green）在 255 ~ 0间，根据点击的相对位置获取g值\n                    blue = 255;                                     // 区域3b值（blue）一直保持不变，都是255\n                    break;\n\n                case 4:                                             // 渐变区域 4：(0, 0, 255)~(255, 0, 255)\n                    red = Math.round(255 * yushu / 40);             // 区域4r值（red）在 0 ~ 255间，根据点击的相对位置获取r值\n                    green = 0;                                      // 区域4g值（green）一直保持不变，都是0\n                    blue = 255;                                     // 区域4b值（blue）一直保持不变，都是255\n                    break;\n\n                case 5:                                             // 渐变区域 5：(255, 0, 255)~(255, 0, 0)\n                    red = 255;                                      // 区域5r值（red）一直保持不变，都是255\n                    green = 0;                                      // 区域5g值（green）一直保持不变，都是255\n                    blue = Math.round(255 * (1 - yushu / 40));      // 区域5b值（blue）在 255 ~ 0间，根据点击的相对位置获取b值\n                    break;\n                default:\n                    break;\n            }\n            // util.toHex函数将r、g、b值转化为16进制，（xxx, yyy, zzz）-> xxyyzz\n            const colorHEX = `${util.toHex(red)}${util.toHex(green)}${util.toHex(blue)}`;\n\n            this.setState({\n                color: colorHEX,        // 实时更改输入框颜色值为当前选择的基本色调rgb值\n                satValue: colorHEX      // 实时更改选色器的其色调值为当前输入值\n            });\n        }\n    }\n\n    /**\n     * 选色器为用户提供了常用颜色样例，当用户点击颜色样例后，判断颜色样例色值是否合法，并更改输入框的颜色值、颜色展示区和基色调\n     *\n     * @protected\n     * @param {Object} opt 用户点击的颜色样例，获取到其属性对象，有两个属性，颜色值和基色调\n     */\n    onBoxClick(opt) {\n\n        let err = this.isRawInputError(opt.val);\n\n        this.setState({\n            color: opt.val,\n            satValue: opt.satVal,\n            error: err\n        });\n\n    }\n\n    /**\n     * 当用户手动键入输入框的颜色值hex（16进制），相应的颜色展示区跟着变化，此时基色调不变\n     *\n     * @protected\n     * @param {Object} e 颜色输入框内值发生改变时的事件\n     */\n    onHexChange(e) {\n        // 获取当前输入框值\n        let rgb = e.target.value;\n        // 用户输入超过6个字符时，不显示后续输入并返回\n        if (rgb.length > 6) {\n            return;\n        }\n        // 判断用户输入值是否符合规则（16进制），如有非法字符，则替换为''\n        rgb = rgb.replace(/[^0-9a-f\bA-F]/gi, '');\n        // 将结果赋给选色器的颜色值，并在颜色展示区显示该颜色\n        this.setState({color: rgb.toUpperCase()});\n    }\n\n    /**\n     * 当用户点击饱和度（saturation）区域时，输入框和颜色展示区显示相应颜色，\n     * 饱和度区域颜色变化，由基色调satValue rgb值向000000（白色）和FFFFFF（黑色）变化\n     *\n     * @protected\n     * @param {Object} e 用户在饱和度区域的点击事件\n     */\n    onSaturationChange(e) {\n        // 获取当前选色器里饱和度区域的位置\n        const {top, left} = this.refs.saturation.getBoundingClientRect();\n        const satValue = this.state.satValue;  // 获得当前其色调，饱和度的基本颜色\n\n        let satl = e.pageX - left;  // 获取用户点击位置相对饱和度的位置——左\n        let satt = e.pageY - top;   // 获取用户点击位置相对饱和度的位置——高\n\n        // 选色器的饱和度区域长240px，宽150px，判断用户是否点击在饱和度区域内\n        if ((satl >= 0 && satl <= 240) && (satt >= 0 && satt <= 150)) {\n            let percentH = satt / 150; // 获取用户点击的饱和度的相对高度，越高颜色越接近黑色\n            let percentW = satl / 240; // 获取用户点击的饱和度的相对宽度，越近越接近白色\n\n            // rgb颜色值由三个元素表示：0 1 表示元素r；2 3 表示元素g；4 5表示元素b，0 2 4分别是元素r g b值的开始\n            // 获取当前饱和度的颜色值rgb\n            let colorHEX = [0, 2, 4].reduce((result, item) => {\n                // 将颜色三个元素r g b的16进制值转化为10进制\n                let part = parseInt('0x' + satValue.slice(item, item + 2), 16);\n                part = 255 - (255 - part) * percentW; // 获取基色调各元素相对白色的饱和度（亮度）\n                part = util.toHex(Math.round(part * (1 - percentH)));   // 再获取基色调各元素相对黑色的饱和度（暗度），将结果转为16进制\n                return result + part; // 将结果保存\n            }, '');\n            // 将最终获得饱和度的颜色值输出，赋给输入框，并在相应颜色区展示\n            this.setState({color: colorHEX});\n        }\n    }\n\n    /**\n     * 渲染常用颜色样例区域的颜色样例结构\n     *\n     * @protected\n     * @param {Object} box 定义的常用颜色样例对象，包含颜色值和基色调两个属性\n     * @return {React.Element}\n     */\n    renderBox(box) {\n\n        const {\n            color,  // 颜色样例的颜色值\n            hue     // 颜色样例的基色调\n        } = box;\n\n        return (\n            <span\n                key={color}\n                className={cx.getPartClassName('box')}\n                style={{\n                    backgroundColor: '#' + color\n                }}\n                onClick={() => this.onBoxClick({val: color, satVal: hue})}>\n            </span>\n        );\n    }\n\n    /**\n     * 渲染常用颜色样例区域\n     *\n     * @protected\n     * @param {Array} boxes 包含颜色样例的数组\n     * @return {React.Element}\n     */\n    renderBoxes(boxes) {\n\n        return (\n            <div className={cx.getPartClassName('boxes')}>\n                {boxes.map(item => this.renderBox(item))}\n            </div>\n        );\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        const {\n            satValue,       // 当前基色调\n            open,           // 选色器显示状态\n            color,          // 当前选色器最终的选择颜色\n            value,          // 输入组件的值，也就是选色器最终颜色值\n            error           // 选色器输入框的输入值是否合法\n        } = this.state;\n\n        const {\n            placeholder,    // 用户可定义的选色器标签提示文字，'请选择'等提示语\n            boxes           // 用户可定义的常用颜色样例\n        } = this.props;\n\n        return (\n            <div ref=\"main\" className={cx(this.props).build()}>\n                <label\n                    className={cx.getPartClassName('label')}\n                    onClick={this.onLabelClick}>\n                        <span\n                            className={cx.getPartClassName('placeholder')}\n                            style={{color: value ? '#333' : ''}}>\n                            {value ? value : placeholder}\n                        </span>\n                    <Icon icon='expand-more'/>\n                </label>\n                <Validity validity={this.state.validity} />\n                <div\n                    className={cx.getPartClassName('popup')}\n                    style={{\n                        display: open ? 'block' : 'none'\n                    }}>\n                    <div\n                        ref=\"saturation\"\n                        className={cx.getPartClassName('saturation')}\n                        style={{\n                            backgroundColor: '#' + satValue\n                        }}\n                        onClick={this.onSaturationChange}>\n                        <div className={cx.getPartClassName('white')}>\n                            <div className={cx.getPartClassName('black')}></div>\n                        </div>\n                    </div>\n                    <div\n                        ref=\"hue\"\n                        className={cx.getPartClassName('hue')}\n                        onClick={this.onHueChange} />\n                    <div className={cx.getPartClassName('input-box')}>\n                        <span>Hex</span>\n                        <input\n                            className={cx.getPartClassName('rgbstr')}\n                            type=\"text\"\n                            onBlur={() => {\n                                this.setState({\n                                    error: this.isRawInputError(color)\n                                });\n                            }}\n                            ref=\"rgbStr\"\n                            placeholder={placeholder}\n                            value={color}\n                            onChange={this.onHexChange}\n                            style={{\n                                border: error ? '1px red solid' : null\n                            }}/>\n                        <div\n                            className={cx.getPartClassName('result')}\n                            style={{\n                                backgroundColor: '#' + color\n                            }}>\n                        </div>\n                        <Button\n                            label=\"OK\"\n                            key=\"submit\"\n                            size=\"xxs\"\n                            type=\"button\"\n                            variants={['secondery']}\n                            className={cx.getPartClassName('submit')}\n                            onClick={this.onSubmit}/>\n                    </div>\n                    {this.renderBoxes(boxes)}\n                </div>\n            </div>\n\n        );\n\n    }\n\n}\n\nColorPicker.displayName = 'ColorPicker';\n\nColorPicker.defaultProps = {\n\n    ...InputComponent.defaultProps,\n\n    /**\n     * 选色器标签文字\n     */\n    placeholder: '请选择',\n    // 用户自行定义的常用颜色样例\n    boxes: [\n        {color: 'FF425E', hue: 'FF0059'},\n        {color: 'C6EDE8', hue: '00FFF9'},\n        {color: '66CCCC', hue: '00FFF9'},\n        {color: 'FFFFFF', hue: '00FFF9'},\n        {color: '000000', hue: '0079FF'},\n        {color: 'CCCCCC', hue: '00CCFF'},\n        {color: '576069', hue: 'FF0026'},\n        {color: 'E2D3AC', hue: 'FFC600'},\n        {color: 'FDDA04', hue: 'FFDF00'},\n        {color: 'E58308', hue: 'FF8C00'},\n        {color: 'FF99CC', hue: 'FF00BF'},\n        {color: 'FC9D9B', hue: 'FF0000'},\n        {color: '59453E', hue: 'FF0000'},\n        {color: 'CCFF00', hue: 'B3FF00'}\n    ]\n\n};\n\nColorPicker.propTypes = {\n    ...InputComponent.propTypes,\n    placeholder: PropTypes.string,\n    boxes: PropTypes.arrayOf(PropTypes.shape({\n        color: PropTypes.string.isRequired,\n        hue: PropTypes.string.isRequired\n    }))\n};\n"]}