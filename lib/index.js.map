{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.js","webpack:///webpack/bootstrap 2a8930081a9c72fae49c","webpack:///./src/index.js","webpack:///./src/util.js","webpack:///external \"melon-core/InputComponent\"","webpack:///external \"melon-core/classname/cxBuilder\"","webpack:///external \"melon/Button\"","webpack:///external \"melon/Icon\"","webpack:///external \"react\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_3__","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_5__","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_7__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","global","apply","undefined","_react","_InputComponent2","_cxBuilder","_Icon","_Button","_util","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","default","_interopRequireDefault","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_react2","_InputComponent3","_Icon2","_Button2","util","_extends","assign","target","i","arguments","length","source","cx","ColorPicker","_InputComponent","props","context","_this","onSubmit","bind","onHueChange","onSaturationChange","onBoxClick","onLabelClick","onHexChange","isRawInputError","onClickAway","state","satValue","color","open","error","componentWillUnmount","document","addEventListener","e","_this2","refs","main","contains","setState","removeEventListener","_this3","onChange","type","_refs$hue$getBounding","hue","getBoundingClientRect","top","left","huel","pageX","huet","pageY","red","green","blue","quyu","parseInt","yushu","Math","round","colorHEX","toHex","opt","err","val","satVal","rgb","replace","toUpperCase","_this4","_refs$saturation$getB","saturation","satl","satt","percentH","percentW","reduce","result","item","part","slice","renderBox","box","_this5","createElement","className","getPartClassName","style","backgroundColor","onClick","renderBoxes","boxes","_this6","map","render","_this7","_state","_props","placeholder","variants","states","size","addVariants","addStates","build","ref","icon","display","onBlur","border","label","displayName","defaultProps","propTypes","PropTypes","string","arrayOf","shape","isRequired","n","toString"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"melon-core/InputComponent\"), require(\"melon-core/classname/cxBuilder\"), require(\"melon/Button\"), require(\"melon/Icon\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"melon-core/InputComponent\", \"melon-core/classname/cxBuilder\", \"melon/Button\", \"melon/Icon\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"melon-colorpicker\"] = factory(require(\"melon-core/InputComponent\"), require(\"melon-core/classname/cxBuilder\"), require(\"melon/Button\"), require(\"melon/Icon\"), require(\"react\"));\n\telse\n\t\troot[\"melon-colorpicker\"] = factory(root[\"melon-core/InputComponent\"], root[\"melon-core/classname/cxBuilder\"], root[\"melon/Button\"], root[\"melon/Icon\"], root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"melon-core/InputComponent\"), require(\"melon-core/classname/cxBuilder\"), require(\"melon/Button\"), require(\"melon/Icon\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"melon-core/InputComponent\", \"melon-core/classname/cxBuilder\", \"melon/Button\", \"melon/Icon\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"melon-colorpicker\"] = factory(require(\"melon-core/InputComponent\"), require(\"melon-core/classname/cxBuilder\"), require(\"melon/Button\"), require(\"melon/Icon\"), require(\"react\"));\n\telse\n\t\troot[\"melon-colorpicker\"] = factory(root[\"melon-core/InputComponent\"], root[\"melon-core/classname/cxBuilder\"], root[\"melon/Button\"], root[\"melon/Icon\"], root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(7), __webpack_require__(3), __webpack_require__(4), __webpack_require__(6), __webpack_require__(5), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports !== \"undefined\") {\n\t        factory(exports, require('react'), require('melon-core/InputComponent'), require('melon-core/classname/cxBuilder'), require('melon/Icon'), require('melon/Button'), require('./util'));\n\t    } else {\n\t        var mod = {\n\t            exports: {}\n\t        };\n\t        factory(mod.exports, global.react, global.InputComponent, global.cxBuilder, global.Icon, global.Button, global.util);\n\t        global.index = mod.exports;\n\t    }\n\t})(this, function (exports, _react, _InputComponent2, _cxBuilder, _Icon, _Button, _util) {\n\t    'use strict';\n\t\n\t    exports.__esModule = true;\n\t\n\t    var _react2 = _interopRequireDefault(_react);\n\t\n\t    var _InputComponent3 = _interopRequireDefault(_InputComponent2);\n\t\n\t    var _Icon2 = _interopRequireDefault(_Icon);\n\t\n\t    var _Button2 = _interopRequireDefault(_Button);\n\t\n\t    var util = _interopRequireWildcard(_util);\n\t\n\t    function _interopRequireWildcard(obj) {\n\t        if (obj && obj.__esModule) {\n\t            return obj;\n\t        } else {\n\t            var newObj = {};\n\t\n\t            if (obj != null) {\n\t                for (var key in obj) {\n\t                    if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n\t                }\n\t            }\n\t\n\t            newObj.default = obj;\n\t            return newObj;\n\t        }\n\t    }\n\t\n\t    function _interopRequireDefault(obj) {\n\t        return obj && obj.__esModule ? obj : {\n\t            default: obj\n\t        };\n\t    }\n\t\n\t    var _extends = Object.assign || function (target) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            var source = arguments[i];\n\t\n\t            for (var key in source) {\n\t                if (Object.prototype.hasOwnProperty.call(source, key)) {\n\t                    target[key] = source[key];\n\t                }\n\t            }\n\t        }\n\t\n\t        return target;\n\t    };\n\t\n\t    function _classCallCheck(instance, Constructor) {\n\t        if (!(instance instanceof Constructor)) {\n\t            throw new TypeError(\"Cannot call a class as a function\");\n\t        }\n\t    }\n\t\n\t    function _possibleConstructorReturn(self, call) {\n\t        if (!self) {\n\t            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t        }\n\t\n\t        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n\t    }\n\t\n\t    function _inherits(subClass, superClass) {\n\t        if (typeof superClass !== \"function\" && superClass !== null) {\n\t            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n\t        }\n\t\n\t        subClass.prototype = Object.create(superClass && superClass.prototype, {\n\t            constructor: {\n\t                value: subClass,\n\t                enumerable: false,\n\t                writable: true,\n\t                configurable: true\n\t            }\n\t        });\n\t        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n\t    }\n\t\n\t    var cx = (0, _cxBuilder.create)('ColorPicker');\n\t\n\t    /**\n\t     * melon colorpicker——选色器，主要由色调块、饱和度区、颜色值输入框、颜色展示区和常用颜色样例五部分组成\n\t     * 用户最终选择的颜色取决于基色调和饱和度，选择的颜色在颜色展示区可以看见\n\t     *\n\t     * @class\n\t     * @extends {InputComponent}\n\t     */\n\t\n\t    var ColorPicker = function (_InputComponent) {\n\t        _inherits(ColorPicker, _InputComponent);\n\t\n\t        function ColorPicker(props, context) {\n\t            _classCallCheck(this, ColorPicker);\n\t\n\t            var _this = _possibleConstructorReturn(this, _InputComponent.call(this, props, context));\n\t\n\t            _this.onSubmit = _this.onSubmit.bind(_this);\n\t            _this.onHueChange = _this.onHueChange.bind(_this);\n\t            _this.onSaturationChange = _this.onSaturationChange.bind(_this);\n\t            _this.onBoxClick = _this.onBoxClick.bind(_this);\n\t            _this.onLabelClick = _this.onLabelClick.bind(_this);\n\t            _this.onHexChange = _this.onHexChange.bind(_this);\n\t            _this.isRawInputError = _this.isRawInputError.bind(_this);\n\t            _this.onClickAway = _this.onClickAway.bind(_this);\n\t\n\t            _this.state = _extends({}, _this.state, {\n\t                satValue: '00FFE7', // 预设颜色选择器的基色调rgb值，颜色值饱和度区域变化取决于该值\n\t                color: '00FFE7', // 预设颜色选择器的最终选择的颜色值rgb，和选色器的颜色值hex输入框的值绑定，决定颜色展示区的颜色\n\t                open: false, // 表示当前colorpicker选色器的状态，默认是没有显示\n\t                error: false // 表示当前颜色值输入框的值是否不合法，默认是合法\n\t            });\n\t\n\t            return _this;\n\t        }\n\t\n\t        /**\n\t         * react组件生命周期——组件销毁前调用\n\t         *\n\t         * @public\n\t         */\n\t\n\t\n\t        ColorPicker.prototype.componentWillUnmount = function componentWillUnmount() {\n\t            // colorpicker销毁时给document解绑click事件onClickAway\n\t            document.addEventListener('click', this.onClickAway);\n\t        };\n\t\n\t        ColorPicker.prototype.onClickAway = function onClickAway(e) {\n\t            var _this2 = this;\n\t\n\t            var open = this.state.open;\n\t            // 当选色器已打开，且点击位置(e.target)没有点击在选色器上(this.refs.main)时，关闭选色器，并解绑点击事件onClickAway\n\t            if (open && !this.refs.main.contains(e.target)) {\n\t                this.setState({ open: false }, function () {\n\t                    document.removeEventListener('click', _this2.onClickAway);\n\t                });\n\t            }\n\t        };\n\t\n\t        ColorPicker.prototype.onLabelClick = function onLabelClick(e) {\n\t            var _this3 = this;\n\t\n\t            var open = this.state.open;\n\t\n\t            this.setState({\n\t                open: !open\n\t            }, function () {\n\t                if (!open) {\n\t                    // 当颜色选择器打开时，给document绑定事件\n\t                    document.addEventListener('click', _this3.onClickAway);\n\t                } else {\n\t                    // 关闭颜色选择器后，解绑该事件\n\t                    document.removeEventListener('click', _this3.onClickAway);\n\t                }\n\t            });\n\t        };\n\t\n\t        ColorPicker.prototype.isRawInputError = function isRawInputError(color) {\n\t            // 输入的颜色值rgb不能为空，且长度只能为3或者6（不包含#）\n\t            return color !== '' && color.length !== 3 && color.length !== 6;\n\t        };\n\t\n\t        ColorPicker.prototype.onSubmit = function onSubmit() {\n\t            // 如果颜色值rgb不合法，不能提交，并返回\n\t            if (this.state.error) {\n\t                return;\n\t            }\n\t            // 获取当前输入框的颜色值rgb\n\t            var color = this.state.color;\n\t            // 关闭颜色选择器\n\t            this.setState({ open: false });\n\t\n\t            _InputComponent.prototype.onChange.call(this, {\n\t                type: 'change',\n\t                target: this,\n\t                value: color ? '#' + color : ''\n\t            });\n\t        };\n\t\n\t        ColorPicker.prototype.onHueChange = function onHueChange(e) {\n\t            var _refs$hue$getBounding = this.refs.hue.getBoundingClientRect();\n\t\n\t            var top = _refs$hue$getBounding.top;\n\t            var left = _refs$hue$getBounding.left;\n\t\n\t            var huel = e.pageX - left; // 获取用户点击位置相对色调块的位置——左\n\t            var huet = e.pageY - top; // 获取用户点击位置相对色调块的位置——高\n\t            var red = 0; // 初始化rgb值中r值（red），值域0~255\n\t            var green = 0; // 初始化rgb值中g值（green），值域0~255\n\t            var blue = 0; // 初始化rgb值中b值（blue），值域0~255\n\t\n\t            // 选色器的色调块长240px，宽16px，判断用户是否点击在色调块上\n\t            if (huel >= 0 && huel <= 240 && huet >= 0 && huet <= 16) {\n\t                // 色调块由六个颜色渐变区域组成，0: (255, 0, 0)~(255, 255, 0); 1: (255, 255, 0)~(0, 255, 0); 2: (0, 255, 0)~(0, 255, 255);\n\t                // 3: (0, 255, 255)~(0, 0, 255); 4: (0, 0, 255)~(255, 0, 255); 5: (255, 0, 255)~(255, 0, 0);\n\t                // 每个渐变区域长40px\n\t                var quyu = parseInt(huel / 40, 10); // 获取用户点击的颜色渐变区\n\t                var yushu = huel % 40; // 获取用户点击位置在相应渐变区的相对位置\n\t\n\t                switch (quyu) {\n\t                    case 0:\n\t                        // 渐变区域 0：(255, 0, 0)~(255, 255, 0)\n\t                        red = 255; // 区域0r值（red）一直保持不变，都是255\n\t                        green = Math.round(255 * yushu / 40); // 区域0g值（green）在 0 ~ 255间，根据点击的相对位置获取g值\n\t                        blue = 0; // 区域0b值（blue）一直保持不变，都是0\n\t                        break;\n\t\n\t                    case 1:\n\t                        // 渐变区域 1：(255, 255, 0)~(0, 255, 0)\n\t                        red = Math.round(255 * (1 - yushu / 40)); // 区域1r值（red）在 255 ~ 0间，根据点击的相对位置获取r值\n\t                        green = 255; // 区域1g值（green）一直保持不变，都是255\n\t                        blue = 0; // 区域1b值（blue）一直保持不变，都是0\n\t                        break;\n\t\n\t                    case 2:\n\t                        // 渐变区域 2：(0, 255, 0)~(0, 255, 255)\n\t                        red = 0; // 区域2r值（red）一直保持不变，都是0\n\t                        green = 255; // 区域2g值（green）一直保持不变，都是255\n\t                        blue = Math.round(255 * yushu / 40); // 区域2b值（blue）在 0 ~ 255间，根据点击的相对位置获取b值\n\t                        break;\n\t\n\t                    case 3:\n\t                        // 渐变区域 3：(0, 255, 255)~(0, 0, 255)\n\t                        red = 0; // 区域3r值（red）一直保持不变，都是0\n\t                        green = Math.round(255 * (1 - yushu / 40)); // 区域3g值（green）在 255 ~ 0间，根据点击的相对位置获取g值\n\t                        blue = 255; // 区域3b值（blue）一直保持不变，都是255\n\t                        break;\n\t\n\t                    case 4:\n\t                        // 渐变区域 4：(0, 0, 255)~(255, 0, 255)\n\t                        red = Math.round(255 * yushu / 40); // 区域4r值（red）在 0 ~ 255间，根据点击的相对位置获取r值\n\t                        green = 0; // 区域4g值（green）一直保持不变，都是0\n\t                        blue = 255; // 区域4b值（blue）一直保持不变，都是255\n\t                        break;\n\t\n\t                    case 5:\n\t                        // 渐变区域 5：(255, 0, 255)~(255, 0, 0)\n\t                        red = 255; // 区域5r值（red）一直保持不变，都是255\n\t                        green = 0; // 区域5g值（green）一直保持不变，都是255\n\t                        blue = Math.round(255 * (1 - yushu / 40)); // 区域5b值（blue）在 255 ~ 0间，根据点击的相对位置获取b值\n\t                        break;\n\t                }\n\t                // util.toHex函数将r、g、b值转化为16进制，（xxx, yyy, zzz）-> xxyyzz\n\t                var colorHEX = '' + util.toHex(red) + util.toHex(green) + util.toHex(blue);\n\t\n\t                this.setState({\n\t                    color: colorHEX, // 实时更改输入框颜色值为当前选择的基本色调rgb值\n\t                    satValue: colorHEX // 实时更改选色器的其色调值为当前输入值\n\t                });\n\t            }\n\t        };\n\t\n\t        ColorPicker.prototype.onBoxClick = function onBoxClick(opt) {\n\t\n\t            var err = this.isRawInputError(opt.val);\n\t\n\t            this.setState({\n\t                color: opt.val,\n\t                satValue: opt.satVal,\n\t                error: err\n\t            });\n\t        };\n\t\n\t        ColorPicker.prototype.onHexChange = function onHexChange(e) {\n\t            // 获取当前输入框值\n\t            var rgb = e.target.value;\n\t            // 用户输入超过6个字符时，不显示后续输入并返回\n\t            if (rgb.length > 6) {\n\t                return false;\n\t            }\n\t            // 判断用户输入值是否符合规则（16进制），如有非法字符，则替换为''\n\t            rgb = rgb.replace(/[^0-9a-f\bA-F]/gi, '');\n\t            // 将结果赋给选色器的颜色值，并在颜色展示区显示该颜色\n\t            this.setState({ color: rgb.toUpperCase() });\n\t            return true;\n\t        };\n\t\n\t        ColorPicker.prototype.onSaturationChange = function onSaturationChange(e) {\n\t            var _this4 = this;\n\t\n\t            var _refs$saturation$getB = this.refs.saturation.getBoundingClientRect();\n\t\n\t            var top = _refs$saturation$getB.top;\n\t            var left = _refs$saturation$getB.left;\n\t\n\t            var satValue = this.state.satValue; // 获得当前其色调，饱和度的基本颜色\n\t\n\t            var satl = e.pageX - left; // 获取用户点击位置相对饱和度的位置——左\n\t            var satt = e.pageY - top; // 获取用户点击位置相对饱和度的位置——高\n\t\n\t            // 选色器的饱和度区域长240px，宽150px，判断用户是否点击在饱和度区域内\n\t            if (satl >= 0 && satl <= 240 && satt >= 0 && satt <= 150) {\n\t                (function () {\n\t                    var percentH = satt / 150; // 获取用户点击的饱和度的相对高度，越高颜色越接近黑色\n\t                    var percentW = satl / 240; // 获取用户点击的饱和度的相对宽度，越近越接近白色\n\t\n\t                    // rgb颜色值由三个元素表示：0 1 表示元素r；2 3 表示元素g；4 5表示元素b，0 2 4分别是元素r g b值的开始\n\t                    // 获取当前饱和度的颜色值rgb\n\t                    var colorHEX = [0, 2, 4].reduce(function (result, item) {\n\t                        // 将颜色三个元素r g b的16进制值转化为10进制\n\t                        var part = parseInt('0x' + satValue.slice(item, item + 2), 16);\n\t                        part = 255 - (255 - part) * percentW; // 获取基色调各元素相对白色的饱和度（亮度）\n\t                        part = util.toHex(Math.round(part * (1 - percentH))); // 再获取基色调各元素相对黑色的饱和度（暗度），将结果转为16进制\n\t                        return result + part; // 将结果保存\n\t                    }, '');\n\t                    // 将最终获得饱和度的颜色值输出，赋给输入框，并在相应颜色区展示\n\t                    _this4.setState({ color: colorHEX });\n\t                })();\n\t            }\n\t        };\n\t\n\t        ColorPicker.prototype.renderBox = function renderBox(box) {\n\t            var _this5 = this;\n\t\n\t            var color = box.color;\n\t            var hue = box.hue;\n\t\n\t\n\t            return _react2['default'].createElement('span', {\n\t                key: color,\n\t                className: cx.getPartClassName('box'),\n\t                style: {\n\t                    backgroundColor: '#' + color\n\t                },\n\t                onClick: function onClick() {\n\t                    return _this5.onBoxClick({ val: color, satVal: hue });\n\t                } });\n\t        };\n\t\n\t        ColorPicker.prototype.renderBoxes = function renderBoxes(boxes) {\n\t            var _this6 = this;\n\t\n\t            return _react2['default'].createElement(\n\t                'div',\n\t                { className: cx.getPartClassName('boxes') },\n\t                boxes.map(function (item) {\n\t                    return _this6.renderBox(item);\n\t                })\n\t            );\n\t        };\n\t\n\t        ColorPicker.prototype.render = function render() {\n\t            var _this7 = this;\n\t\n\t            var _state = this.state;\n\t            var satValue = _state.satValue;\n\t            var open = _state.open;\n\t            var color = _state.color;\n\t            var value = _state.value;\n\t            var error = _state.error;\n\t            var _props = this.props;\n\t            var placeholder = _props.placeholder;\n\t            var boxes = _props.boxes;\n\t            var variants = _props.variants;\n\t            var states = _props.states;\n\t            var size = _props.size;\n\t\n\t\n\t            var className = cx(this.props).addVariants(variants).addStates(states).build();\n\t\n\t            return _react2['default'].createElement(\n\t                'div',\n\t                { ref: 'main', className: className },\n\t                _react2['default'].createElement(\n\t                    'label',\n\t                    {\n\t                        className: cx.getPartClassName('label'),\n\t                        onClick: this.onLabelClick },\n\t                    _react2['default'].createElement(\n\t                        'span',\n\t                        {\n\t                            className: cx.getPartClassName('placeholder'),\n\t                            style: { color: value ? '#333' : '' } },\n\t                        value ? value : placeholder\n\t                    ),\n\t                    _react2['default'].createElement(_Icon2['default'], { icon: 'expand-more', size: size })\n\t                ),\n\t                _react2['default'].createElement(\n\t                    'div',\n\t                    {\n\t                        className: cx.getPartClassName('popup'),\n\t                        style: {\n\t                            display: open ? 'block' : 'none'\n\t                        } },\n\t                    _react2['default'].createElement(\n\t                        'div',\n\t                        {\n\t                            ref: 'saturation',\n\t                            className: cx.getPartClassName('saturation'),\n\t                            style: {\n\t                                backgroundColor: '#' + satValue\n\t                            },\n\t                            onClick: this.onSaturationChange },\n\t                        _react2['default'].createElement(\n\t                            'div',\n\t                            { className: cx.getPartClassName('white') },\n\t                            _react2['default'].createElement('div', { className: cx.getPartClassName('black') })\n\t                        )\n\t                    ),\n\t                    _react2['default'].createElement('div', {\n\t                        ref: 'hue',\n\t                        className: cx.getPartClassName('hue'),\n\t                        onClick: this.onHueChange }),\n\t                    _react2['default'].createElement(\n\t                        'div',\n\t                        { className: cx.getPartClassName('input-box') },\n\t                        _react2['default'].createElement(\n\t                            'span',\n\t                            null,\n\t                            'Hex'\n\t                        ),\n\t                        _react2['default'].createElement('input', {\n\t                            className: cx.getPartClassName('rgbstr'),\n\t                            type: 'text',\n\t                            onBlur: function onBlur() {\n\t                                _this7.setState({\n\t                                    error: _this7.isRawInputError(color)\n\t                                });\n\t                            },\n\t                            ref: 'rgbStr',\n\t                            placeholder: placeholder,\n\t                            value: color,\n\t                            onChange: this.onHexChange,\n\t                            style: {\n\t                                border: error ? '1px red solid' : null\n\t                            } }),\n\t                        _react2['default'].createElement('div', {\n\t                            className: cx.getPartClassName('result'),\n\t                            style: {\n\t                                backgroundColor: '#' + color\n\t                            } }),\n\t                        _react2['default'].createElement(_Button2['default'], {\n\t                            label: 'OK',\n\t                            key: 'submit',\n\t                            size: 'xxs',\n\t                            type: 'button',\n\t                            variants: ['secondery'],\n\t                            className: cx.getPartClassName('submit'),\n\t                            onClick: this.onSubmit })\n\t                    ),\n\t                    this.renderBoxes(boxes)\n\t                )\n\t            );\n\t        };\n\t\n\t        return ColorPicker;\n\t    }(_InputComponent3['default']);\n\t\n\t    exports['default'] = ColorPicker;\n\t\n\t\n\t    ColorPicker.displayName = 'ColorPicker';\n\t\n\t    ColorPicker.defaultProps = _extends({}, _InputComponent3['default'].defaultProps, {\n\t\n\t        /**\n\t         * 选色器标签文字\n\t         */\n\t        placeholder: '请选择',\n\t        // 用户自行定义的常用颜色样例\n\t        boxes: [{ color: 'FF425E', hue: 'FF0059' }, { color: 'C6EDE8', hue: '00FFF9' }, { color: '66CCCC', hue: '00FFF9' }, { color: 'FFFFFF', hue: '00FFF9' }, { color: '000000', hue: '0079FF' }, { color: 'CCCCCC', hue: '00CCFF' }, { color: '576069', hue: 'FF0026' }, { color: 'E2D3AC', hue: 'FFC600' }, { color: 'FDDA04', hue: 'FFDF00' }, { color: 'E58308', hue: 'FF8C00' }, { color: 'FF99CC', hue: 'FF00BF' }, { color: 'FC9D9B', hue: 'FF0000' }, { color: '59453E', hue: 'FF0000' }, { color: 'CCFF00', hue: 'B3FF00' }]\n\t\n\t    });\n\t\n\t    ColorPicker.propTypes = _extends({}, _InputComponent3['default'].propTypes, {\n\t        placeholder: _react.PropTypes.string,\n\t        boxes: _react.PropTypes.arrayOf(_react.PropTypes.shape({\n\t            color: _react.PropTypes.string.isRequired,\n\t            hue: _react.PropTypes.string.isRequired\n\t        }))\n\t    });\n\t});\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n\t  if (true) {\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports !== \"undefined\") {\n\t    factory(exports);\n\t  } else {\n\t    var mod = {\n\t      exports: {}\n\t    };\n\t    factory(mod.exports);\n\t    global.util = mod.exports;\n\t  }\n\t})(this, function (exports) {\n\t  \"use strict\";\n\t\n\t  exports.__esModule = true;\n\t  exports.toHex = toHex;\n\t  /**\n\t   * @file 颜色相关的小工具\n\t   * @author jingyuanZhang<zhangjingyuan1108@outlook.com>\n\t   * @author leon <ludafa@outlook.com>\n\t   */\n\t\n\t  /**\n\t   * 将rgb三个值转为hex\n\t   *\n\t   * @param {number} n r,b,g当前值（0-255）\n\t   * @return {boolean} hexstr 转化后的16进制字符串\n\t   */\n\t  function toHex(n) {\n\t\n\t    n = (+n).toString(16);\n\t\n\t    if (n.length === 1) {\n\t      n = \"0\" + n;\n\t    }\n\t\n\t    return n.toUpperCase();\n\t  }\n\t});\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2a8930081a9c72fae49c","/**\n * @file ColorPicker\n * @author jingyuanZhang<zhangjingyuan1108@outlook.com>\n * @author leon<ludafa@outlook.com>\n */\n\nimport React, {PropTypes} from 'react';\nimport InputComponent from 'melon-core/InputComponent';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nimport Icon  from 'melon/Icon';\nimport Button from 'melon/Button';\n\nimport * as util from './util';\n\nconst cx = create('ColorPicker');\n\n/**\n * melon colorpicker——选色器，主要由色调块、饱和度区、颜色值输入框、颜色展示区和常用颜色样例五部分组成\n * 用户最终选择的颜色取决于基色调和饱和度，选择的颜色在颜色展示区可以看见\n *\n * @class\n * @extends {InputComponent}\n */\nexport default class ColorPicker extends InputComponent {\n\n    constructor(props, context) {\n        // 继承InputComponent\n        super(props, context);\n\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onHueChange = this.onHueChange.bind(this);\n        this.onSaturationChange = this.onSaturationChange.bind(this);\n        this.onBoxClick = this.onBoxClick.bind(this);\n        this.onLabelClick = this.onLabelClick.bind(this);\n        this.onHexChange = this.onHexChange.bind(this);\n        this.isRawInputError = this.isRawInputError.bind(this);\n        this.onClickAway = this.onClickAway.bind(this);\n\n        this.state = {\n            ...this.state,\n            satValue: '00FFE7',     // 预设颜色选择器的基色调rgb值，颜色值饱和度区域变化取决于该值\n            color: '00FFE7',        // 预设颜色选择器的最终选择的颜色值rgb，和选色器的颜色值hex输入框的值绑定，决定颜色展示区的颜色\n            open: false,            // 表示当前colorpicker选色器的状态，默认是没有显示\n            error: false            // 表示当前颜色值输入框的值是否不合法，默认是合法\n        };\n\n    }\n\n    /**\n     * react组件生命周期——组件销毁前调用\n     *\n     * @public\n     */\n    componentWillUnmount() {\n        // colorpicker销毁时给document解绑click事件onClickAway\n        document.addEventListener('click', this.onClickAway);\n    }\n\n    /**\n     * 当选色器打开后，根据点击事件位置判断是都关闭选色器，点击选色器组件外关闭选择器\n     *\n     * @protected\n     * @param {Object} e 点击事件\n     */\n    onClickAway(e) {\n\n        let open = this.state.open;\n        // 当选色器已打开，且点击位置(e.target)没有点击在选色器上(this.refs.main)时，关闭选色器，并解绑点击事件onClickAway\n        if (open && !this.refs.main.contains(e.target)) {\n            this.setState({open: false}, () => {\n                document.removeEventListener('click', this.onClickAway);\n            });\n        }\n    }\n\n    /**\n     * 给label标签TextBox绑定的点击事件，点击TextBox时打开颜色选择器，当选择器打开后，再次点击关闭\n     *\n     * @protected\n     * @param {Object} e 点击事件\n     */\n    onLabelClick(e) {\n\n        let open = this.state.open;\n\n        this.setState({\n            open: !open\n        }, () => {\n            if (!open) {\n                // 当颜色选择器打开时，给document绑定事件\n                document.addEventListener('click', this.onClickAway);\n            }\n            else {\n                // 关闭颜色选择器后，解绑该事件\n                document.removeEventListener('click', this.onClickAway);\n            }\n        });\n    }\n\n    /**\n     * 检查用户输入的rgb字符串的长度是否不合法\n     *\n     * @protected\n     * @param {string} color 颜色值输入框的输入值\n     * @return {boolean} 验证结果\n     */\n    isRawInputError(color) {\n        // 输入的颜色值rgb不能为空，且长度只能为3或者6（不包含#）\n        return color !== '' && color.length !== 3 && color.length !== 6;\n    }\n\n    /**\n     * 点击OK键，提交输入框的颜色值rgb\n     *\n     * @protected\n     */\n    onSubmit() {\n        // 如果颜色值rgb不合法，不能提交，并返回\n        if (this.state.error) {\n            return;\n        }\n        // 获取当前输入框的颜色值rgb\n        let color = this.state.color;\n        // 关闭颜色选择器\n        this.setState({open: false});\n\n        super.onChange({\n            type: 'change',\n            target: this,\n            value: color ? '#' + color : ''\n        });\n    }\n\n    /**\n     * 用户点击色调块（hue div）,选择基本色调rgb值\n     *\n     * @protected\n     * @param {Object} e 用户点击色调块hue事件\n     */\n    onHueChange(e) {\n\n        // 获取当前选色器里色调块的位置\n        const {top, left} = this.refs.hue.getBoundingClientRect();\n        let huel = e.pageX - left;  // 获取用户点击位置相对色调块的位置——左\n        let huet = e.pageY - top;   // 获取用户点击位置相对色调块的位置——高\n        let red = 0;                // 初始化rgb值中r值（red），值域0~255\n        let green = 0;              // 初始化rgb值中g值（green），值域0~255\n        let blue = 0;               // 初始化rgb值中b值（blue），值域0~255\n\n        // 选色器的色调块长240px，宽16px，判断用户是否点击在色调块上\n        if ((huel >= 0 && huel <= 240) && (huet >= 0 && huet <= 16)) {\n            // 色调块由六个颜色渐变区域组成，0: (255, 0, 0)~(255, 255, 0); 1: (255, 255, 0)~(0, 255, 0); 2: (0, 255, 0)~(0, 255, 255);\n            // 3: (0, 255, 255)~(0, 0, 255); 4: (0, 0, 255)~(255, 0, 255); 5: (255, 0, 255)~(255, 0, 0);\n            // 每个渐变区域长40px\n            let quyu = parseInt(huel / 40, 10); // 获取用户点击的颜色渐变区\n            let yushu = huel % 40; // 获取用户点击位置在相应渐变区的相对位置\n\n            switch (quyu) {\n                case 0:                                             // 渐变区域 0：(255, 0, 0)~(255, 255, 0)\n                    red = 255;                                      // 区域0r值（red）一直保持不变，都是255\n                    green = Math.round(255 * yushu / 40);           // 区域0g值（green）在 0 ~ 255间，根据点击的相对位置获取g值\n                    blue = 0;                                       // 区域0b值（blue）一直保持不变，都是0\n                    break;\n\n                case 1:                                             // 渐变区域 1：(255, 255, 0)~(0, 255, 0)\n                    red = Math.round(255 * (1 - yushu / 40));       // 区域1r值（red）在 255 ~ 0间，根据点击的相对位置获取r值\n                    green = 255;                                    // 区域1g值（green）一直保持不变，都是255\n                    blue = 0;                                       // 区域1b值（blue）一直保持不变，都是0\n                    break;\n\n                case 2:                                             // 渐变区域 2：(0, 255, 0)~(0, 255, 255)\n                    red = 0;                                        // 区域2r值（red）一直保持不变，都是0\n                    green = 255;                                    // 区域2g值（green）一直保持不变，都是255\n                    blue = Math.round(255 * yushu / 40);            // 区域2b值（blue）在 0 ~ 255间，根据点击的相对位置获取b值\n                    break;\n\n                case 3:                                             // 渐变区域 3：(0, 255, 255)~(0, 0, 255)\n                    red = 0;                                        // 区域3r值（red）一直保持不变，都是0\n                    green = Math.round(255 * (1 - yushu / 40));     // 区域3g值（green）在 255 ~ 0间，根据点击的相对位置获取g值\n                    blue = 255;                                     // 区域3b值（blue）一直保持不变，都是255\n                    break;\n\n                case 4:                                             // 渐变区域 4：(0, 0, 255)~(255, 0, 255)\n                    red = Math.round(255 * yushu / 40);             // 区域4r值（red）在 0 ~ 255间，根据点击的相对位置获取r值\n                    green = 0;                                      // 区域4g值（green）一直保持不变，都是0\n                    blue = 255;                                     // 区域4b值（blue）一直保持不变，都是255\n                    break;\n\n                case 5:                                             // 渐变区域 5：(255, 0, 255)~(255, 0, 0)\n                    red = 255;                                      // 区域5r值（red）一直保持不变，都是255\n                    green = 0;                                      // 区域5g值（green）一直保持不变，都是255\n                    blue = Math.round(255 * (1 - yushu / 40));      // 区域5b值（blue）在 255 ~ 0间，根据点击的相对位置获取b值\n                    break;\n            }\n            // util.toHex函数将r、g、b值转化为16进制，（xxx, yyy, zzz）-> xxyyzz\n            const colorHEX = `${util.toHex(red)}${util.toHex(green)}${util.toHex(blue)}`;\n\n            this.setState({\n                color: colorHEX,        // 实时更改输入框颜色值为当前选择的基本色调rgb值\n                satValue: colorHEX      // 实时更改选色器的其色调值为当前输入值\n            });\n        }\n    }\n\n    /**\n     * 选色器为用户提供了常用颜色样例，当用户点击颜色样例后，判断颜色样例色值是否合法，并更改输入框的颜色值、颜色展示区和基色调\n     *\n     * @protected\n     * @param {Object} opt 用户点击的颜色样例，获取到其属性对象，有两个属性，颜色值和基色调\n     */\n    onBoxClick(opt) {\n\n        let err = this.isRawInputError(opt.val);\n\n        this.setState({\n            color: opt.val,\n            satValue: opt.satVal,\n            error: err\n        });\n\n    }\n\n    /**\n     * 当用户手动键入输入框的颜色值hex（16进制），相应的颜色展示区跟着变化，此时基色调不变\n     *\n     * @protected\n     * @param {Object} e 颜色输入框内值发生改变时的事件\n     * @return {boolean} 颜色改变是否成功\n     */\n    onHexChange(e) {\n        // 获取当前输入框值\n        let rgb = e.target.value;\n        // 用户输入超过6个字符时，不显示后续输入并返回\n        if (rgb.length > 6) {\n            return false;\n        }\n        // 判断用户输入值是否符合规则（16进制），如有非法字符，则替换为''\n        rgb = rgb.replace(/[^0-9a-f\bA-F]/gi, '');\n        // 将结果赋给选色器的颜色值，并在颜色展示区显示该颜色\n        this.setState({color: rgb.toUpperCase()});\n        return true;\n    }\n\n    /**\n     * 当用户点击饱和度（saturation）区域时，输入框和颜色展示区显示相应颜色，\n     * 饱和度区域颜色变化，由基色调satValue rgb值向000000（白色）和FFFFFF（黑色）变化\n     *\n     * @protected\n     * @param {Object} e 用户在饱和度区域的点击事件\n     */\n    onSaturationChange(e) {\n        // 获取当前选色器里饱和度区域的位置\n        const {top, left} = this.refs.saturation.getBoundingClientRect();\n        const satValue = this.state.satValue;  // 获得当前其色调，饱和度的基本颜色\n\n        let satl = e.pageX - left;  // 获取用户点击位置相对饱和度的位置——左\n        let satt = e.pageY - top;   // 获取用户点击位置相对饱和度的位置——高\n\n        // 选色器的饱和度区域长240px，宽150px，判断用户是否点击在饱和度区域内\n        if ((satl >= 0 && satl <= 240) && (satt >= 0 && satt <= 150)) {\n            let percentH = satt / 150; // 获取用户点击的饱和度的相对高度，越高颜色越接近黑色\n            let percentW = satl / 240; // 获取用户点击的饱和度的相对宽度，越近越接近白色\n\n            // rgb颜色值由三个元素表示：0 1 表示元素r；2 3 表示元素g；4 5表示元素b，0 2 4分别是元素r g b值的开始\n            // 获取当前饱和度的颜色值rgb\n            let colorHEX = [0, 2, 4].reduce((result, item) => {\n                // 将颜色三个元素r g b的16进制值转化为10进制\n                let part = parseInt('0x' + satValue.slice(item, item + 2), 16);\n                part = 255 - (255 - part) * percentW; // 获取基色调各元素相对白色的饱和度（亮度）\n                part = util.toHex(Math.round(part * (1 - percentH)));   // 再获取基色调各元素相对黑色的饱和度（暗度），将结果转为16进制\n                return result + part; // 将结果保存\n            }, '');\n            // 将最终获得饱和度的颜色值输出，赋给输入框，并在相应颜色区展示\n            this.setState({color: colorHEX});\n        }\n    }\n\n    /**\n     * 渲染常用颜色样例区域的颜色样例结构\n     *\n     * @protected\n     * @param {Object} box 定义的常用颜色样例对象，包含颜色值和基色调两个属性\n     * @return {React.Element}\n     */\n    renderBox(box) {\n\n        const {\n            color,  // 颜色样例的颜色值\n            hue     // 颜色样例的基色调\n        } = box;\n\n        return (\n            <span\n                key={color}\n                className={cx.getPartClassName('box')}\n                style={{\n                    backgroundColor: '#' + color\n                }}\n                onClick={() => this.onBoxClick({val: color, satVal: hue})}>\n            </span>\n        );\n    }\n\n    /**\n     * 渲染常用颜色样例区域\n     *\n     * @protected\n     * @param {Array} boxes 包含颜色样例的数组\n     * @return {React.Element}\n     */\n    renderBoxes(boxes) {\n        return (\n            <div className={cx.getPartClassName('boxes')}>\n                {boxes.map(item => this.renderBox(item))}\n            </div>\n        );\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        const {\n            satValue,       // 当前基色调\n            open,           // 选色器显示状态\n            color,          // 当前选色器最终的选择颜色\n            value,          // 输入组件的值，也就是选色器最终颜色值\n            error           // 选色器输入框的输入值是否合法\n        } = this.state;\n\n        const {\n            placeholder,    // 用户可定义的选色器标签提示文字，'请选择'等提示语\n            boxes,          // 用户可定义的常用颜色样例\n            variants,\n            states,\n            size\n        } = this.props;\n\n        const className = cx(this.props)\n            .addVariants(variants)\n            .addStates(states)\n            .build();\n\n        return (\n            <div ref=\"main\" className={className}>\n                <label\n                    className={cx.getPartClassName('label')}\n                    onClick={this.onLabelClick}>\n                        <span\n                            className={cx.getPartClassName('placeholder')}\n                            style={{color: value ? '#333' : ''}}>\n                            {value ? value : placeholder}\n                        </span>\n                    <Icon icon='expand-more' size={size} />\n                </label>\n                <div\n                    className={cx.getPartClassName('popup')}\n                    style={{\n                        display: open ? 'block' : 'none'\n                    }}>\n                    <div\n                        ref=\"saturation\"\n                        className={cx.getPartClassName('saturation')}\n                        style={{\n                            backgroundColor: '#' + satValue\n                        }}\n                        onClick={this.onSaturationChange}>\n                        <div className={cx.getPartClassName('white')}>\n                            <div className={cx.getPartClassName('black')}></div>\n                        </div>\n                    </div>\n                    <div\n                        ref=\"hue\"\n                        className={cx.getPartClassName('hue')}\n                        onClick={this.onHueChange} />\n                    <div className={cx.getPartClassName('input-box')}>\n                        <span>Hex</span>\n                        <input\n                            className={cx.getPartClassName('rgbstr')}\n                            type=\"text\"\n                            onBlur={() => {\n                                this.setState({\n                                    error: this.isRawInputError(color)\n                                });\n                            }}\n                            ref=\"rgbStr\"\n                            placeholder={placeholder}\n                            value={color}\n                            onChange={this.onHexChange}\n                            style={{\n                                border: error ? '1px red solid' : null\n                            }}/>\n                        <div\n                            className={cx.getPartClassName('result')}\n                            style={{\n                                backgroundColor: '#' + color\n                            }}>\n                        </div>\n                        <Button\n                            label=\"OK\"\n                            key=\"submit\"\n                            size=\"xxs\"\n                            type=\"button\"\n                            variants={['secondery']}\n                            className={cx.getPartClassName('submit')}\n                            onClick={this.onSubmit}/>\n                    </div>\n                    {this.renderBoxes(boxes)}\n                </div>\n            </div>\n\n        );\n\n    }\n\n}\n\nColorPicker.displayName = 'ColorPicker';\n\nColorPicker.defaultProps = {\n\n    ...InputComponent.defaultProps,\n\n    /**\n     * 选色器标签文字\n     */\n    placeholder: '请选择',\n    // 用户自行定义的常用颜色样例\n    boxes: [\n        {color: 'FF425E', hue: 'FF0059'},\n        {color: 'C6EDE8', hue: '00FFF9'},\n        {color: '66CCCC', hue: '00FFF9'},\n        {color: 'FFFFFF', hue: '00FFF9'},\n        {color: '000000', hue: '0079FF'},\n        {color: 'CCCCCC', hue: '00CCFF'},\n        {color: '576069', hue: 'FF0026'},\n        {color: 'E2D3AC', hue: 'FFC600'},\n        {color: 'FDDA04', hue: 'FFDF00'},\n        {color: 'E58308', hue: 'FF8C00'},\n        {color: 'FF99CC', hue: 'FF00BF'},\n        {color: 'FC9D9B', hue: 'FF0000'},\n        {color: '59453E', hue: 'FF0000'},\n        {color: 'CCFF00', hue: 'B3FF00'}\n    ]\n\n};\n\nColorPicker.propTypes = {\n    ...InputComponent.propTypes,\n    placeholder: PropTypes.string,\n    boxes: PropTypes.arrayOf(PropTypes.shape({\n        color: PropTypes.string.isRequired,\n        hue: PropTypes.string.isRequired\n    }))\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/**\n * @file 颜色相关的小工具\n * @author jingyuanZhang<zhangjingyuan1108@outlook.com>\n * @author leon <ludafa@outlook.com>\n */\n\n/**\n * 将rgb三个值转为hex\n *\n * @param {number} n r,b,g当前值（0-255）\n * @return {boolean} hexstr 转化后的16进制字符串\n */\nexport function toHex(n) {\n\n    n = (+n).toString(16);\n\n    if (n.length === 1) {\n        n = `0${n}`;\n    }\n\n    return n.toUpperCase();\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/util.js","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"melon-core/InputComponent\"\n// module id = 3\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"melon-core/classname/cxBuilder\"\n// module id = 4\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"melon/Button\"\n// module id = 5\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"melon/Icon\"\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react\"\n// module id = 7\n// module chunks = 0"],"sourceRoot":""}